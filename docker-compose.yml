version: '3.8'

networks:
  backend:
    driver: bridge

services:
  api-gateway:
    image: api-gateway
    container_name: api-gateway
    build:
      context: ./api-gateway
    ports:
      - "8080:8080"
    networks:
      - backend
    depends_on:
      - order-service
      - payments-service
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]

  order-db:
    image: postgres:17
    container_name: order-db
    environment:
      POSTGRES_DB: order
      POSTGRES_PASSWORD: order123
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5434:5432"

  payments-db:
    image: postgres:17
    container_name: payments-db
    environment:
      POSTGRES_DB: payment
      POSTGRES_PASSWORD: payment123
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"

#  kafka:
#    image: apache/kafka:3.9.0
#    container_name: kafka
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_ENABLE_KRAFT: "yes"
#      KAFKA_NODE_ID: 1
#      KAFKA_PROCESS_ROLES: "controller,broker"
#      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
#      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
#      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
#      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
#    networks:
#      - backend
#    volumes:
#      - kafka_data:/tmp/kraft-combined-logs

  order-service:
    image: order-service
    container_name: order-service
    build:
      context: ./order-service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: "docker"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    networks:
      - backend
    depends_on:
      order-db:
        condition: service_healthy
      kafka:
        condition: service_started

  payments-service:
    image: payments-service
    container_name: payments-service
    build:
      context: ./payments-service
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: "docker"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    networks:
      - backend
    depends_on:
      payments-db:
        condition: service_healthy
      kafka:
        condition: service_started

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8083:8080"
    networks:
      - backend
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - backend

  kafka:
    image: bitnami/kafka:3.3
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    networks:
      - backend


volumes:
  pg_data:
  kafka_data: